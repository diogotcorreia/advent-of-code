I could not solve this. My thought process is below, but I've ended up copying the solution of someone else. Read on.

Each of the 16 sections has the following format

inp w
mul x 0
add x z
mod x 26
div z (some constant: 1, 26)
add x (some constant: 11, 12, 10, -8, 15, -11, -3, -1, -10, -16)
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y (some constant: 8, 12, 10, 2, 4, 9, 10, 3, 7, 2)
mul y x
add z y

There are some things we can notice:
- X and Y reset in each section (their previous value does not matter; it's always zero)
- W also does not matter, because it's set to the serial number digit in the begining of each section
- Therefore, only z is shared between sections

Section 1: (constants 1, 11, 8)
z = 0
x = 11
x == w -> false since w <= 9
x == 0 -> true
y = 25
y = 26
y = w
y = w + 8
z = w + 8

Section 2: (constants: 1, 12, 8)
x = w1 + 8
x = (w1 + 8) % 26
x = (w1 + 8) % 26 + 11
x != w -> true since w <= 9
y = 26
z = (w1 + 8) * 26 = 26 * w1 + 208
y = w2 + 12
z = 26 * w1 + w2 + 208 + 12 = 26 * w1 + w2 + 220

Section 3: (constants: 1, 10, 12)
x = 26 * w1 + w2 + 220
x = (w2 + 12) % 26 -> 26 * w1 mod 26 always equals 0
x = (w2 + 12) % 26 + 10
x != w -> true since w <= 9
y = 26
z = 676 * w1 + 26 * w2 + 5720
y = w3 + 12
z = 676 * w1 + 26 * w2 + w3 + 5732

Section 4: (constants: 26, -8, 10)
x = 676 * w1 + 26 * w2 + w3 + 5732
x = (w3 + 12) % 26
z = 26 * w1 + w2 + 220 -> w3 + 5732 could not be 221 since (5732 + 9) / 26 would be 220 as well
x = (w3 + 12) % 26 - 8 => w3 + 4
if w3 + 4 == w4 -> x = 0; else x = 1

when x = 0
y = 1
z = 26 * w1 + w2 + 220

when x = 1
y = 26
z = 676 * w1 + 26 * w2 + 5720
y = w4 + 10
z = 676 * w1 + 26 * w2 + w4 + 5730

CONCLUSION: w4 does not matter here if w3 + 4 == w4

---

I'm tired of this, I'll follow the spoiler here: https://github.com/dphilipson/advent-of-code-2021/blob/master/src/days/day24.rs

So for me, the input is gonna have:

11, 8
12, 8
10, 12
-8, 10
15, 2
15, 8
-11, 4
10, 9
-3, 10
15, 3
-3, 7
-1, 7
-10, 2
-16, 2

PUSH input[0] + 8
PUSH input[1] + 8
PUSH input[2] + 12
POP. Must have input[3] == popped_value - 8
PUSH input[4] + 2
PUSH input[5] + 8
POP. Must have input[6] == popped_value - 11
PUSH input[7] + 9
POP. Must have input[8] == popped_value - 3
PUSH input[9] + 3
POP. Must have input[10] == popped_value - 3
POP. Must have input[11] == popped_value - 1
POP. Must have input[12] == popped_value - 10
POP. Must have input[13] == popped_value - 16

input[3] = input[2] + 4
input[6] = input[5] - 3
input[8] = input[7] + 6
input[10] = input[9]
input[11] = input[4] + 1
input[12] = input[1] - 2
input[13] = input[0] - 8

Trying to maximise from left to right:

input[0] = 9 -> input[13] = 1
input[1] = 9 -> input[12] = 7
input[2] = 5 -> input[3] = 9
input[4] = 8 -> input[11] = 9
input[5] = 9 -> input[6] = 6
input[7] = 3 -> input[8] = 9
input[9] = 9 -> input[10] = 9

Therefore: 99598963999971

Trying to minimize from left to right:

input[0] = 9 -> input[13] = 1
input[1] = 3 -> input[12] = 1
input[2] = 1 -> input[3] = 5
input[4] = 1 -> input[11] = 2
input[5] = 4 -> input[6] = 1
input[7] = 1 -> input[8] = 7
input[9] = 1 -> input[10] = 1

Therefore: 93151411711211
